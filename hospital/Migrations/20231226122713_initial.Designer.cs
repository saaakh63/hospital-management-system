// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hospital.connect;

#nullable disable

namespace hospital.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20231226122713_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("hospital.models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Appointment_Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Department_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Patient_Id")
                        .HasColumnType("int");

                    b.Property<string>("Patient_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Department_Id");

                    b.HasIndex("Doctor_ID");

                    b.HasIndex("Patient_Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("hospital.models.Department", b =>
                {
                    b.Property<int>("Department_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_Id"));

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("hospital.models.DoctorAccount", b =>
                {
                    b.Property<int>("Doctor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_Id"));

                    b.Property<int>("Department_Id")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_PhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Doctor_Id");

                    b.HasIndex("Department_Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("hospital.models.PatientAccount", b =>
                {
                    b.Property<int>("Patient_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patient_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Patient_ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("hospital.models.PatientReport", b =>
                {
                    b.Property<int>("PatientReport_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientReport_Id"));

                    b.Property<int?>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Report_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Report_MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Report_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("cost")
                        .HasColumnType("float");

                    b.Property<string>("prescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientReport_Id");

                    b.HasIndex("Doctor_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("PatientReports");
                });

            modelBuilder.Entity("hospital.models.Appointment", b =>
                {
                    b.HasOne("hospital.models.Department", "Department")
                        .WithMany("Appointments")
                        .HasForeignKey("Department_Id");

                    b.HasOne("hospital.models.DoctorAccount", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctor_ID");

                    b.HasOne("hospital.models.PatientAccount", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("Patient_Id");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("hospital.models.DoctorAccount", b =>
                {
                    b.HasOne("hospital.models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("Department_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("hospital.models.PatientReport", b =>
                {
                    b.HasOne("hospital.models.DoctorAccount", "Doctor")
                        .WithMany()
                        .HasForeignKey("Doctor_ID");

                    b.HasOne("hospital.models.PatientAccount", "Patient")
                        .WithMany("PatientReports")
                        .HasForeignKey("Patient_ID");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("hospital.models.Department", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("hospital.models.DoctorAccount", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("hospital.models.PatientAccount", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PatientReports");
                });
#pragma warning restore 612, 618
        }
    }
}
